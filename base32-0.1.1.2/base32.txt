-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | RFC 4648-compliant Base32 encodings/decodings
--   
--   RFC 4648-compliant Base32 encodings and decodings. This library
--   provides performant encoding and decoding primitives, as well as
--   support for textual values.
@package base32
@version 0.1.1.2


-- | This module contains the combinators implementing the RFC 4648
--   specification for the Base32-Hex encoding including unpadded and
--   lenient variants
module Data.ByteString.Base32.Hex

-- | Encode a <a>ByteString</a> value as a Base32hex <a>Text</a> value with
--   padding.
--   
--   See: <a>RFC-4648 section 7</a>
encodeBase32 :: ByteString -> Text

-- | Encode a <a>ByteString</a> as a Base32hex <a>ByteString</a> value with
--   padding.
--   
--   See: <a>RFC-4648 section 7</a>
encodeBase32' :: ByteString -> ByteString

-- | Decode a padded Base32hex encoded <a>ByteString</a> value.
--   
--   See: <a>RFC-4648 section 7</a>
decodeBase32 :: ByteString -> Either Text ByteString

-- | Encode a <a>ByteString</a> as a Base32hex <a>Text</a> value without
--   padding.
--   
--   See: <a>RFC-4648 section 7</a>, <a>RFC-4648 section 3.2</a>
encodeBase32Unpadded :: ByteString -> Text

-- | Encode a <a>ByteString</a> as a Base32hex <a>ByteString</a> value
--   without padding.
--   
--   See: <a>RFC-4648 section 7</a>, <a>RFC-4648 section 3.2</a>
encodeBase32Unpadded' :: ByteString -> ByteString

-- | Decode an arbitrarily padded Base32hex encoded <a>ByteString</a>
--   value.
--   
--   See: <a>RFC-4648 section 7</a>, <a>RFC-4648 section 3.2</a>
decodeBase32Unpadded :: ByteString -> Either Text ByteString

-- | Tell whether a <a>ByteString</a> is Base32hex-encoded.
isBase32Hex :: ByteString -> Bool

-- | Tell whether a <a>ByteString</a> is a valid Base32hex format.
--   
--   This will not tell you whether or not this is a correct Base32hex
--   representation, only that it conforms to the correct shape. To check
--   whether it is a true Base32 encoded <a>ByteString</a> value, use
--   <a>isBase32Hex</a>.
isValidBase32Hex :: ByteString -> Bool


-- | This module contains the combinators implementing the RFC 4648
--   specification for the Base32 encoding including unpadded and lenient
--   variants
module Data.ByteString.Base32

-- | Encode a <a>ByteString</a> value as Base32 <a>Text</a> with padding.
--   
--   See: <a>RFC-4648 section 6</a>
encodeBase32 :: ByteString -> Text

-- | Encode a <a>ByteString</a> value as a Base32 <a>ByteString</a> value
--   with padding.
--   
--   See: <a>RFC-4648 section 6</a>
encodeBase32' :: ByteString -> ByteString

-- | Decode a padded Base32-encoded <a>ByteString</a> value.
--   
--   See: <a>RFC-4648 section 6</a>
decodeBase32 :: ByteString -> Either Text ByteString

-- | Encode a <a>ByteString</a> value as a Base32 <a>Text</a> value without
--   padding.
--   
--   See: <a>RFC-4648 section 6</a>, <a>RFC-4648 section 3.2</a>
encodeBase32Unpadded :: ByteString -> Text

-- | Encode a <a>ByteString</a> value as a Base32 <a>ByteString</a> value
--   with padding.
--   
--   See: <a>RFC-4648 section 6</a>, <a>RFC-4648 section 3.2</a>
encodeBase32Unpadded' :: ByteString -> ByteString

-- | Decode an arbitarily padded Base32-encoded <a>ByteString</a> value.
--   
--   See: <a>RFC-4648 section 6</a>, <a>RFC-4648 section 3.2</a>
decodeBase32Unpadded :: ByteString -> Either Text ByteString

-- | Tell whether a <a>ByteString</a> value is base32 encoded.
isBase32 :: ByteString -> Bool

-- | Tell whether a <a>ByteString</a> value is a valid Base32 format.
--   
--   This will not tell you whether or not this is a correct Base32
--   representation, only that it conforms to the correct shape. To check
--   whether it is a true Base32 encoded <a>ByteString</a> value, use
--   <a>isBase32</a>.
isValidBase32 :: ByteString -> Bool


-- | This module contains the combinators implementing the RFC 4648
--   specification for the Base32 encoding including unpadded and lenient
--   variants
module Data.Text.Encoding.Base32

-- | Encode a <a>Text</a> value in Base32 with padding.
--   
--   See: <a>RFC-4648 section 6</a>
encodeBase32 :: Text -> Text

-- | Decode a padded Base32-encoded <a>Text</a> value
--   
--   See: <a>RFC-4648 section 6</a>
decodeBase32 :: Text -> Either Text Text

-- | Encode a <a>Text</a> value in Base32 without padding.
--   
--   See: <a>RFC-4648 section 6</a>, <a>RFC-4648 section 3.2</a>
encodeBase32Unpadded :: Text -> Text

-- | Decode an arbitrarily padded Base32-encoded <a>Text</a>
--   
--   See: <a>RFC-4648 section 6</a>, <a>RFC-4648 section 3.2</a>
decodeBase32Unpadded :: Text -> Either Text Text

-- | Tell whether a <a>Text</a> value is Base32-encoded.
isBase32 :: Text -> Bool

-- | Tell whether a <a>Text</a> value is a valid Base32 format.
--   
--   This will not tell you whether or not this is a correct Base32
--   representation, only that it conforms to the correct shape. To check
--   whether it is a true Base32 encoded <a>Text</a> value, use
--   <a>isBase32</a>.
isValidBase32 :: Text -> Bool


-- | This module contains the combinators implementing the RFC 4648
--   specification for the Base32-Hex encoding including unpadded and
--   lenient variants
module Data.Text.Encoding.Base32.Hex

-- | Encode a <a>Text</a> value in Base32hex with padding.
--   
--   See: <a>RFC-4648 section 7</a>
encodeBase32 :: Text -> Text

-- | Decode a padded Base32hex-encoded <a>Text</a> value.
--   
--   See: <a>RFC-4648 section 7</a>
decodeBase32 :: Text -> Either Text Text

-- | Encode a <a>Text</a> value in Base32hex without padding.
--   
--   See: <a>RFC-4648 section 7</a>, <a>RFC-4648 section 3.2</a>
encodeBase32Unpadded :: Text -> Text

-- | Decode an arbitrarily padded Base32hex encoded <a>Text</a> value
--   
--   See: <a>RFC-4648 section 7</a>, <a>RFC-4648 section 3.2</a>
decodeBase32Unpadded :: Text -> Either Text Text

-- | Tell whether a <a>Text</a> value is Base32hex-encoded.
isBase32Hex :: Text -> Bool

-- | Tell whether a <a>Text</a> value is a valid Base32hex format.
--   
--   This will not tell you whether or not this is a correct Base32hex
--   representation, only that it conforms to the correct shape. To check
--   whether it is a true Base32 encoded <a>Text</a> value, use
--   <a>isBase32Hex</a>.
isValidBase32Hex :: Text -> Bool
